/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2020-2023 Oliver Oxtoby

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::dynamicRefineRebalanceFvMesh

Description
    A wrapper around dynamicRefineFvMesh to add parallel redistribution 
    capabilities. Wrapper is necessary to access protected members of fvMesh so 
    that we can preserve V0 and meshPhi during mesh re-distribution.

    Not needed in Foundation version >= 10 as a distributor can be used instead.

    Replaces the default entries in run-time selection tables, so can be used
    in place of dynamicRefineFvMesh without changing the input.

    In addition to the entries in dynamicRefineFvMesh, the following controls
    are available:
    \heading Patch usage

    \table
        Property   | Description                 | Required  | Default value
        rebalance  | Whether to perform parallel redistribution | no   | yes
        maxLoadImbalance | Maximum fractional imbalance         | no   | 0.1
    \endtable

\*---------------------------------------------------------------------------*/

#ifndef dynamicRefineRebalanceFvMesh_H
#define dynamicRefineRebalanceFvMesh_H

#if !(FOUNDATION >= 10)

#include "dynamicRefineFvMesh.H"
#include "decompositionMethod.H"
#include "processorFvPatchField.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                   Class dynamicRefineRebalanceFvMesh Declaration
\*---------------------------------------------------------------------------*/

class dynamicRefineRebalanceFvMesh
:
    public dynamicRefineFvMesh
{
private:

        //- No copy construct
        dynamicRefineRebalanceFvMesh(const dynamicRefineRebalanceFvMesh&) = delete;

        //- No copy assignment
        void operator=(const dynamicRefineRebalanceFvMesh&) = delete;

protected:

    // Protected variables

        //- Whether to do parallel redistribute on mesh topo change
        bool rebalance_;
        //- Maximum load imbalance as a fraction before rebalancing done
        scalar maxLoadImbalance_;

    // Protected member functions
    
        //- Helper function to synchronise fields after mesh redistribute
        template<class FieldType, class Type>
        void parallelSyncFields(const wordList& fields);

public:

    //- Runtime type information
    TypeName("dynamicRefineFvMesh");


    // Constructors

        //- Construct from IOobject
        explicit dynamicRefineRebalanceFvMesh
        (
            const IOobject& io
            #if OPENFOAM >= 2206
            , const bool doInit=true
            #endif
        );


    //- Destructor
    virtual ~dynamicRefineRebalanceFvMesh() = default;


    // Member functions

        //- Redistribute based on supplied decomposition
        virtual void redistribute(decompositionMethod& decomposer);

        //- Perform parallel redistribution
        virtual void redistributePar();

        //- Update the mesh
        virtual bool update() override;

        //- Map all fields in time using given map.
        virtual void mapFields(const mapPolyMesh& mpm) override;

};


template<class FieldType, class Type>
void dynamicRefineRebalanceFvMesh::parallelSyncFields(const wordList& fields)
{
    forAll(fields, i)
    {
        FieldType& f = const_cast<FieldType&>(this->lookupObject<FieldType>(fields[i]));
        forAll(f.boundaryField(), patchI)
        {
            if (isA<processorFvPatchField<Type>>(f.boundaryField()[patchI]))
            {
                f.boundaryFieldRef()[patchI].initEvaluate();
            }
        }
        forAll(f.boundaryField(), patchI)
        {
            if (isA<processorFvPatchField<Type>>(f.boundaryField()[patchI]))
            {
                f.boundaryFieldRef()[patchI].evaluate();
            }
        }
    }
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

#endif

// ************************************************************************* //
