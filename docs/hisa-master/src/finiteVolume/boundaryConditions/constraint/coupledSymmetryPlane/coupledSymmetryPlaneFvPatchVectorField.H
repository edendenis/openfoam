/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2022 Oliver Oxtoby

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::coupledSymmetryPlaneFvPatchVectorField

Group
    grpInletBoundaryConditions grpOutletBoundaryConditions

Description
    Coupled version of the symmetry boundary condition for vector fields

SourceFiles
    coupledSymmetryPlaneFvPatchVectorField.C

Authors
    Johan Heyns
    Oliver Oxtoby
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef coupledSymmetryPlaneFvPatchVectorFields_H
#define coupledSymmetryPlaneFvPatchVectorFields_H

#include "fvPatchFields.H"
#include "symmetryPlaneFvPatchFields.H"
#include "BlockCoupledBoundary.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
           Class coupledSymmetryPlaneFvPatchVectorField Declaration
\*---------------------------------------------------------------------------*/

class coupledSymmetryPlaneFvPatchVectorField
:
    public symmetryPlaneFvPatchField<vector>,
    public BlockCoupledBoundary<vector>
{
public:

    //- Runtime type information
    TypeName(symmetryPlaneFvPatch::typeName_());


    // Constructors

        //- Construct from patch and internal field
        coupledSymmetryPlaneFvPatchVectorField
        (
            const fvPatch&,
            const DimensionedField<vector, volMesh>&
        );

        //- Construct from patch, internal field and dictionary
        coupledSymmetryPlaneFvPatchVectorField
        (
            const fvPatch&,
            const DimensionedField<vector, volMesh>&,
            const dictionary&
        );

        //- Construct by mapping given coupledSymmetryPlaneFvPatchVectorField
        //  onto a new patch
        coupledSymmetryPlaneFvPatchVectorField
        (
            const coupledSymmetryPlaneFvPatchVectorField&,
            const fvPatch&,
            const DimensionedField<vector, volMesh>&,
            const fvPatchFieldMapper&
        );

        //- Construct as copy
        coupledSymmetryPlaneFvPatchVectorField
        (
            const coupledSymmetryPlaneFvPatchVectorField&
        ) = delete;

        //- Construct as copy setting internal field reference
        coupledSymmetryPlaneFvPatchVectorField
        (
            const coupledSymmetryPlaneFvPatchVectorField&,
            const DimensionedField<vector, volMesh>&
        );

#if FOUNDATION >= 9
#else
        //- Construct and return a clone
        virtual tmp<fvPatchField<vector>> clone() const
        {
            return tmp<fvPatchField<vector>>
            (
                new coupledSymmetryPlaneFvPatchVectorField
                (
                    *this,
                    this->internalField()
                )
            );
        }
#endif

        //- Construct and return a clone setting internal field reference
        virtual tmp<fvPatchField<vector>> clone
        (
            const DimensionedField<vector, volMesh>& iF
        ) const
        {
            return tmp<fvPatchField<vector>>
            (
                new coupledSymmetryPlaneFvPatchVectorField(*this, iF)
            );
        }

    // Member functions

        //- Block-coupled boundary coefficients

            virtual tmp<vectorField> valueInternalCoeffs
            (
                const volScalarField& field
            ) const override;

            virtual tmp<vectorField> gradientInternalCoeffs
            (
                const volScalarField& field
            ) const override;

            virtual tmp<tensorField> valueInternalCoeffs
            (
                const volVectorField& field
            ) const override;

            virtual tmp<tensorField> gradientInternalCoeffs
            (
                const volVectorField& field
            ) const override;

};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
