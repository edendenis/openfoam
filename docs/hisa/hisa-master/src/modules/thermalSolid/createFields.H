// Populate solid field pointer lists

Info<< "Creating solid thermo\n" << endl;
thermo_ = solidThermo::New(mesh);
solidThermo& thermo = thermo_();

//Info<< "Creating radiation model\n" << endl;
//radiation_.set(i, radiation::radiationModel::New(thermo.T()));

Info<< "Reading fvOptions\n" << endl;
solidHeatSources_.reset
(
#if FOUNDATION >= 11
    &fvModels::New(mesh)
#elif FOUNDATION >= 9
    new fvModels(mesh)
#else
    new fv::options(mesh)
#endif
);
#if FOUNDATION >= 9
solidConstraints_.set
(
    new fvConstraints(mesh)
);
#endif

if (!thermo.isotropic())
{
    Info<< "Adding coordinateSystem\n" << endl;
#if FOUNDATION >= 9
    coordinates_ = coordinateSystem::New(mesh, thermo.properties());
#else
    coordinates_ = coordinateSystem::New(mesh, thermo);
#endif    

    tmp<volVectorField> tkappaByCp =
        thermo.Kappa()/thermo.Cp();

    aniAlpha_.reset
    (
        new volSymmTensorField
        (
            IOobject
            (
                "Anialpha",
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::NO_WRITE
            ),
            mesh,
            dimensionedSymmTensor
            (
                "zero",
                tkappaByCp().dimensions(),
                Zero
            )
        )
    );

    updateAniAlpha(tkappaByCp);
}

IOobject betavSolidIO
(
    "betavSolid",
    runTime.timeName(),
    mesh,
    IOobject::MUST_READ,
    IOobject::AUTO_WRITE
);

#if FOUNDATION >= 5 or defined(OPENFOAM)
#if FOUNDATION >= 10
if (typeIOobject<volScalarField>(betavSolidIO).headerOk())
#else
if (betavSolidIO.typeHeaderOk<volScalarField>())
#endif
#else
if (betavSolidIO.headerOk())
#endif
{
    betavSolid_.reset
    (
        new volScalarField(betavSolidIO, mesh)
    );
}
else
{
    betavSolid_.reset
    (
        new volScalarField
        (
            IOobject
            (
                "betavSolid",
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::NO_WRITE
            ),
            mesh,
            dimensionedScalar("1", dimless, scalar(1.0))
        )
    );
}
